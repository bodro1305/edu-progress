---
import type { IBreadcrumbs } from "@/component/ui/breadcrumb.astro";
import Button from "@/component/ui/button.astro";
import Checkbox from "@/component/ui/checkbox.astro";
import Input from "@/component/ui/input.astro";
import Select from "@/component/ui/select.astro";
import Textarea from "@/component/ui/textarea.astro";
import { teachingTimeList } from "@/constant/teaching-time-list";
import UserLayout from "@/layouts/user-layout.astro";
import { CLASS_SUBJECT_LIST } from "@/constant/class-subject-list";
import api from "@/lib/api.lib";
import { LESSON_LIST } from "@/constant/lesson-list";
import { getTodayDay } from "@/utils";

const breadcrumbs: IBreadcrumbs[] = [
  {
    href: "/dashboard/substitute",
    label: "Substitute",
  },
];

const getUsers = async () => {
  try {
    const {
      data: { data },
    } = await api(
      { url: "/user/r" },
      { accessToken: Astro.locals.accessToken },
    );
    return data?.users || [];
  } catch (error) {
    return [];
  }
};

const users = await getUsers();

const teacherList = users.map(({ public_id, full_name }) => ({
  value: public_id,
  text: full_name,
}));

const lessonList = users.map((user) => {
  const userLessons = user.lessons.reduce((acc, lesson) => {
    const matchingLesson = LESSON_LIST.find((l) => l.value === lesson.name);
    if (matchingLesson) {
      acc.push({
        text: matchingLesson.label,
        value: lesson.lesson_public_id,
      });
    }
    return acc;
  }, []);

  return {
    public_id: user.public_id,
    lessons: userLessons,
  };
});

const { user } = Astro.locals;

const IS_SUBSTITUTE = getTodayDay() === user.substitute[0].day;
---

<UserLayout
  title="Substitute"
  breadcrumbs={breadcrumbs}
  pageTitle="Substitute"
  withScrollBar={false}
>
  <div class="bg-white p-2 rounded-lg flex h-full">
    {
      IS_SUBSTITUTE ? (
        <div class="grow overflow-scroll no-scrollbar">
          <section class="p-2">
            <form
              class="w-full grid lg:grid-cols-[1fr,1fr] gap-4"
              id="create-journal-form"
            >
              <section class="">
                <div class="mb-2">
                  <Select id="teacher" withLabel="Guru" options={teacherList} />
                </div>
                <div class="mb-2 lg:hidden">
                  <Select
                    id="class_subject"
                    withLabel="Kelas"
                    options={CLASS_SUBJECT_LIST}
                  />
                </div>
                <div class="mb-2">
                  <Select id="lesson" withLabel="Mata Pelajaran" options={[]} />
                </div>
                <div class="mb-2 grid grid-cols-2 items-center rounded-lg">
                  <section class="">
                    <h1 class="text-sm lg:text-lg mb-2 font-bold">
                      Jam Pelajaran
                    </h1>
                    {teachingTimeList.slice(0, 6).map((list) => (
                      <Checkbox
                        name="teaching_time"
                        text={list.text}
                        id={list.id}
                        value={list.value.toString()}
                      />
                    ))}
                  </section>
                  <section>
                    {teachingTimeList.slice(6).map((list) => (
                      <Checkbox
                        name="teaching_time"
                        text={list.text}
                        id={list.id}
                        value={list.value.toString()}
                      />
                    ))}
                  </section>
                </div>
              </section>
              <section class="">
                <div class="mb-2 hidden lg:block">
                  <Select
                    id="class_subject"
                    withLabel="Kelas"
                    options={CLASS_SUBJECT_LIST}
                  />
                </div>
                <div class="">
                  <Textarea
                    rows="10"
                    id="summary"
                    name="summary"
                    form="create-journal-form"
                    withTitle="Ringkasan"
                    placeholder="Summary or Detail..."
                  />
                </div>
              </section>
              <section>
                <Button colors="green" type="submit" class="w-full">
                  Submit
                </Button>
              </section>
            </form>
          </section>
        </div>
      ) : (
        <div class="w-full flex justify-center items-center h-full">
          <div class="text-center">
            <h1 class="text-xl font-bold text-gray-700 dark:text-white hover:text-gray-600 dark:hover:text-gray-200 hover:underline">
              Anda Tidak Piket Hari ini.
            </h1>
            <p class="mt-2 text-gray-600 dark:text-gray-300">
              Seilahkan Kembali Lain Waktu.
            </p>
          </div>
        </div>
      )
    }
  </div>
</UserLayout>

<script
  type="module"
  define:vars={{
    lessonList,
    currentUser: user,
  }}
>
  import api from "/src/assets/js/api";

  const alertInfo = (type, text) => {
    const rootToastElm = document.querySelector("#toast-container");
    rootToastElm.innerHTML = `
    <div class="${type == "error" ? "error" : "success"}">
      <span>${text}</span>
    </div>
  `;

    setTimeout(() => {
      rootToastElm.innerHTML = "";
    }, 2000);
  };

  const selectElement = (selector, parent = document) =>
    parent.querySelector(selector);
  const selectAllElements = (selector, parent = document) =>
    Array.from(parent.querySelectorAll(selector));

  const mainElm = selectElement("main");

  const substituteJournalForm = selectElement("form");

  const teacherInput = selectElement("select#teacher", substituteJournalForm);
  const lessonInput = selectElement("select#lesson", substituteJournalForm);
  const classSubjectInputs = selectAllElements(
    "select#class_subject",
    substituteJournalForm,
  );
  const teachingTimeInputs = selectAllElements(
    "input[name=teaching_time]",
    substituteJournalForm,
  );
  const summaryInput = selectElement(
    "textarea[name=summary]",
    substituteJournalForm,
  );
  const submitBtn = selectElement("button[type=submit]", substituteJournalForm);

  const syncClassSubjectInputs = (value) => {
    classSubjectInputs.forEach((input) => {
      input.value = value;
    });
  };

  classSubjectInputs.forEach((input) => {
    input.addEventListener("change", (event) => {
      const newValue = event.target.value;
      syncClassSubjectInputs(newValue);
    });
  });

  const validationRules = {
    teacher: (value) => value.trim() !== "",
    lesson: (value) => value.trim() !== "",
    class_subject: (inputs) => inputs.some((input) => input.value !== ""),
    summary: (value) => value.trim().length >= 10,
    teaching_time: (inputs) => inputs.some((input) => input.checked),
  };

  const validateForm = () => {
    const isFormValid =
      validationRules.class_subject(classSubjectInputs) &&
      validationRules.summary(summaryInput.value) &&
      validationRules.teacher(teacherInput.value) &&
      validationRules.teaching_time(teachingTimeInputs);

    submitBtn.disabled = !isFormValid;
  };

  teacherInput.addEventListener("change", (e) => {
    lessonInput.innerHTML = "";

    const matchedLesson = lessonList.find(
      (lesson) => lesson.public_id === e.target.value,
    );
    if (matchedLesson) {
      lessonInput.innerHTML = matchedLesson.lessons.map(
        (l) => `<option value="${l.value}">${l.text}</option>`,
      );
    } else {
      lessonInput.innerHTML = "<option value=''>Please Select</option>";
    }

    validateForm();
  });

  validateForm();

  lessonInput.addEventListener("input", validateForm);
  summaryInput.addEventListener("input", validateForm);
  teachingTimeInputs.forEach((input) =>
    input.addEventListener("change", validateForm),
  );
  classSubjectInputs.forEach((input) =>
    input.addEventListener("change", validateForm),
  );

  substituteJournalForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    mainElm.classList.add("is-loading");
    const formDataObject = new FormData(substituteJournalForm);
    const formData = Object.fromEntries(formDataObject.entries());

    const dataPost = {
      substitute_user_public_id: formData.teacher,
      lesson_public_id: formData.lesson,
      class_subject: formData.class_subject,
      summary: formData.summary,
      teaching_time: formDataObject.getAll("teaching_time"),
      is_substitute: true,
      filled_by_public_id: currentUser.public_id,
    };
    try {
      await api.post("/journal/create-journal", dataPost);
      substituteJournalForm.reset();
      alertInfo("success", "Journal Berhasil Di Buat");
    } catch (error) {
      console.log(error);
      alertInfo("error", "Journal Gagal Di Buat");
    } finally {
      mainElm.classList.remove("is-loading");
    }
  });
</script>
